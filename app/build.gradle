plugins {
  id "org.sonarqube" version "6.2.0.5505"
  id 'com.android.application'
}

final SONAR_PROJECT_VERSION = '1.58'

// Load signing config only if needed
def signingEnabled = gradle.startParameter.taskNames.any { it.toLowerCase().contains("signedrelease") }
def props = loadSigningConfig(signingEnabled)

android {
  namespace 'fr.ralala.hexviewer'
  compileSdk 34

  defaultConfig {
    applicationId "fr.ralala.hexviewer"
    minSdk 23
    targetSdk 34
    // F-Droid seems not to appreciate the use of variables
    versionCode 158
    versionName '1.58'
    vectorDrawables {
      useSupportLibrary true
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
  }

  signingConfigs {
    github {
      if (signingEnabled) {
        storeFile rootProject.file(props['storeFile'].trim())
        storePassword props['storePassword'].trim()
        keyAlias props['keyAlias'].trim()
        keyPassword props['keyPassword'].trim()
        v1SigningEnabled true
        v2SigningEnabled true
        enableV4Signing true
      }
    }
  }

  buildTypes {
    release {
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
    debug {
      // to debug ProGuard rules
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-debug.pro'
    }
    signedRelease {
      initWith release
      matchingFallbacks = ['release']
      if (signingEnabled) {
        signingConfig signingConfigs.github
      }
    }
  }
  buildFeatures {
    compose true
  }
  // This is important, it will run lint checks but won't abort build
  lintOptions {
    abortOnError false
  }
  sonarqube {
    properties {
      property "sonar.projectKey", "Keidan_HexViewer"
      property "sonar.organization", "keidan"
      property "sonar.host.url", "https://sonarcloud.io"
      property 'sonar.projectName', 'HexViewer'
      property 'sonar.projectVersion', SONAR_PROJECT_VERSION
      property 'sonar.coverage.exclusions', "**/**"
      // Exclude rules
      property "sonar.issue.ignore.multicriteria", "e1,e2,e3,e4"
      /* S110 */
      property "sonar.issue.ignore.multicriteria.e1.ruleKey", "java:S110"
      property "sonar.issue.ignore.multicriteria.e1.resourceKey", "**/fr/ralala/hexviewer/ui/activities/settings/SettingsActivity.java"
      property "sonar.issue.ignore.multicriteria.e2.ruleKey", "java:S110"
      property "sonar.issue.ignore.multicriteria.e2.resourceKey", "**/fr/ralala/hexviewer/ui/activities/settings/SettingsListsLandscapeActivity.java"
      property "sonar.issue.ignore.multicriteria.e3.ruleKey", "java:S110"
      property "sonar.issue.ignore.multicriteria.e3.resourceKey", "**/fr/ralala/hexviewer/ui/activities/settings/SettingsListsPortraitActivity.java"
      property "sonar.issue.ignore.multicriteria.e4.ruleKey", "xml:S5604"
      property "sonar.issue.ignore.multicriteria.e4.resourceKey", "**/AndroidManifest.xml"
    }
  }
}

dependencies {
  implementation 'org.apache.commons:commons-collections4:4.0'
  implementation "androidx.appcompat:appcompat:1.7.1"
  implementation "androidx.preference:preference:1.2.1"
  implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
  implementation "androidx.emoji:emoji:1.1.0"
  implementation "com.android.support:support-emoji-bundled:28.0.0"
  implementation "com.google.android.material:material:1.12.0"
  testImplementation "junit:junit:4.13.2"
}

/* Tasks */
tasks.withType(Test).configureEach { testTask ->
  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat "full"
    showStandardStreams = true
  }
  def totalDuration = 0L
  def list = new ArrayList<String>()

  doLast {
    logger.lifecycle("Tests finished.")
  }

  afterTest { descriptor, result ->
    long duration = result.endTime - result.startTime
    list << "Test ${descriptor.name} took ${duration} ms"
    totalDuration += duration
  }

  afterSuite { desc, result ->
    if (!desc.parent) { // root suite
      logger.lifecycle("")
      list.each { li ->
        logger.lifecycle(li)
      }
      logger.lifecycle("Test summary: ${result.testCount} tests, ${result.successfulTestCount} succeeded, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped")
      logger.lifecycle("Total time: ${totalDuration} ms")
    }
  }
}

// versionCode <-> versionName /////////////////////////////////////////////////////////////////////
// I got the idea (code) below from the repository https://github.com/sal0max/currencie
/**
 * Checks if versionCode and versionName match.
 * Needed because of F-Droid: both have to be hard-coded and can't be assigned dynamically.
 * So at least check during build for them to match.
 */
tasks.register('checkVersion') {
  int versionCode = android.defaultConfig.versionCode
  String versionName = android.defaultConfig.versionName
  int correctVersionCode = generateVersionCode(android.defaultConfig.versionName)
  if (versionCode != correctVersionCode)
    throw new GradleException(
      "versionCode and versionName don't match: " +
        "versionCode should be $correctVersionCode. Is $versionCode."
    )
  if (versionName != SONAR_PROJECT_VERSION)
    throw new GradleException(
      "versionName and sonar.projectVersion don't match: " +
        "sonar.projectVersion should be $versionName. Is $SONAR_PROJECT_VERSION."
    )
}
assemble.dependsOn checkVersion

/**
 * Checks if a fastlane changelog for the current version is present.
 */
tasks.register('checkFastlaneChangelog') {
  int versionCode = android.defaultConfig.versionCode
  File changelogFile = file("$rootDir/fastlane/metadata/android/en-US/changelogs/${versionCode}.txt")
  if (!changelogFile.exists())
    throw new GradleException(
      "Fastlane changelog missing: expecting file '$changelogFile'"
    )
}
build.dependsOn checkFastlaneChangelog

/* functions */
private Properties loadSigningConfig(boolean signingEnabled) {
  if (signingEnabled) {
    def props = new Properties()
    def propsFile = rootProject.file("keystore.properties")
    if (!propsFile.exists()) {
      throw new GradleException("Missing 'keystore.properties' file.")
    }

    propsFile.withInputStream { props.load(it) }

    def requiredKeys = ['storeFile', 'storePassword', 'keyAlias', 'keyPassword']
    requiredKeys.each {
      if (!props.containsKey(it) || props[it].trim().isEmpty()) {
        throw new GradleException("Missing or empty property: '${it}' in 'keystore.properties'.")
      }
    }

    def keystorePath = rootProject.file(props['storeFile'].trim())
    if (!keystorePath.exists()) {
      throw new GradleException("Keystore file not found at: ${keystorePath}")
    }
    return props
  }
  return null
}

/**
 * Generates a versionCode based on the given semVer String.
 * @param semVer e.g. 1.27
 * @return e.g. 127 (-> 1 27)
 *
 * 1.58 -> 158
 * 1.58.0 -> 15800
 * 1.0.0 -> 10000
 */
private static int generateVersionCode(String semVer) {
  def parts = semVer.tokenize('.').collect { it.toInteger() }
  parts.inject(0) { code, part -> code * 100 + part }
}
